// FinalProject.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <iostream>
#include <string>
#include <stdlib.h>
#include <iomanip>
#include <vector>
using namespace std;

/*const int empty = 0;  // contains water
const int occupied = 1;  // contains a ship
const int missed = 2;  // shot into ocean
const int hit = 3;  // shot and hit 

using namespace std;

int board[10][10]; // Two-dimensional array for gameboard.

void initialize_board(int array1[10][10]) // Function to initialize the gameboard.
{
	// create a blank board   
	for (int x = 0; x < 10; x++) {
		for (int y = 0; y < 10; y++) {
			array1[x][y] = occupied;
		}
	}
}

void print_board(int array2[10][10]) {
	for (char a = 'A'; a <= 'J'; a++) { //letter coordinates
		cout << setw(5) << a;
	}
	cout << endl;

	for (int i = 1; i <= 10; i++) { //number coordinates
		if (i == 10)
			cout << i;
		else
			cout << " " << i;

		for (int j = 0; j < 10; j++) {

			if (array2[i][j] == occupied || array2[i][j] == 0) {
				cout << setw(5) << "|";
			}
			else if (array2[i][j] == missed) {
				cout << setw(5) << "O|";
			}
			else if (array2[i][j] == hit) {
				cout << setw(5) << "X|";
			}
		}
		cout << "\n";
	}
}

class cShip //Unused so far
{
	int x1, y1, x2, y2; // The position of the front and back of the ship
	int size;
	int damage[]; // for storing the damage. 

public:
	cShip(int x1, int y1, int x2, int y2, int size); // constructor
	~cShip(); // destructor for destroying the damage array
	bool isDestroyed(); // for polling the destroyed
	bool is3(int x, int y); // for polling the 3		
};

cShip::cShip(int x1, int y1, int x2, int y2, int size)
{
}

cShip::~cShip()
{
}

bool cShip::isDestroyed()
{
	return false;
}

bool cShip::is3(int x, int y)
{
	return false;
}

void determine_player_choice(int array[10][10])
{

}


int main()
{
	initialize_board(board);
	determine_player_choice(board);
	print_board(board);

	return 0;
}*/
/*if len 3: can't choose A or B (if vert)*/

/*const int BOARD_WIDTH = 15;
const int BOARD_HEIGHT = 10;
const int SHIP_TYPES = 5;

const char isWATER = 247; //ASCII Character Code
const char isHIT = 'X';
const char isSHIP = 'S';
const char isMISS = '0';

struct POINT {
	//A location on the grid defined
	//by X (horizontal) Y (vertical) coordinates
	int X;
	int Y;
};

struct SHIP {
	//Ship name
	string name;

	//Total points on the grid
	int length;

	//Coordinates of those points
	POINT onGrid[5]; //0-4 max length of biggest ship
					 //Whether or not those points are a "hit"
	bool hitFlag[5];
}ship[SHIP_TYPES];

struct PLAYER {
	char grid[BOARD_WIDTH][BOARD_HEIGHT];
}player[3]; //Ignore player 0, just using player's 1 & 2

enum DIRECTION { HORIZONTAL, VERTICAL };
struct PLACESHIPS {
	DIRECTION direction;
	SHIP shipType;
};

bool gameRunning = false;

//Functions
void LoadShips();
void ResetBoard();
void DrawBoard(int);
PLACESHIPS UserInputShipPlacement();
bool UserInputAttack(int&, int&, int);
bool GameOverCheck(int);

int main()
{
	LoadShips();
	ResetBoard();

	//"PLACE SHIPS" phase of game
	//Loop through each player... 
	for (int aplyr = 1; aplyr<3; ++aplyr)
	{
		//Loop through each ship type to place
		for (int thisShip = 0; thisShip<SHIP_TYPES; ++thisShip)
		{
			//Display gameboard for player
			system("cls");
			DrawBoard(aplyr);
			//Give instructions
			cout << "\n";
			cout << "INSTRUCTIONS (Player " << aplyr << ")\n\n";
			cout << "You are about to place your ships.  Format should be:\n";
			cout << "Facing (0: Horizontal, 1: Vertical), X (top-row) coords, Y (left-side) coords\n";
			cout << "Example: 0 7 2, This would place a ship beginning at X:7 Y:2 going horizontal\n\n";
			cout << "Ship to place: " << ship[thisShip].name << " which has a length of " << ship[thisShip].length << "\n";
			cout << "Where do you want it placed? ";

			//Get input from user and loop until good data is returned
			PLACESHIPS aShip;
			aShip.shipType.onGrid[0].X = -1;
			while (aShip.shipType.onGrid[0].X == -1)
			{
				aShip = UserInputShipPlacement();
			}

			//Combine user data with "this ship" data
			aShip.shipType.length = ship[thisShip].length;
			aShip.shipType.name = ship[thisShip].name;

			//Add the FIRST grid point to the current player's game board
			player[aplyr].grid[aShip.shipType.onGrid[0].X][aShip.shipType.onGrid[0].Y] = isSHIP;

			//Determine ALL grid points based on length and direction
			for (int i = 1; i<aShip.shipType.length; ++i)
			{
				if (aShip.direction == HORIZONTAL) {
					aShip.shipType.onGrid[i].X = aShip.shipType.onGrid[i - 1].X + 1;
					aShip.shipType.onGrid[i].Y = aShip.shipType.onGrid[i - 1].Y;
				}
				if (aShip.direction == VERTICAL) {
					aShip.shipType.onGrid[i].Y = aShip.shipType.onGrid[i - 1].Y + 1;
					aShip.shipType.onGrid[i].X = aShip.shipType.onGrid[i - 1].X;
				}

				//Add the REMAINING grid points to our current players game board
				player[aplyr].grid[aShip.shipType.onGrid[i].X][aShip.shipType.onGrid[i].Y] = isSHIP;
			}
			//Loop back through each ship type
		}
		//Loop back through each player
	}

	//********* FINISHED WITH "PLACE SHIPS" PHASE *********************************
	//*****************************************************************************

	//Ready to play the game
	gameRunning = true;
	int thisPlayer = 1;
	do {
		//Because we are ATTACKING now, the 
		//opposite players board is the display board
		int enemyPlayer;
		if (thisPlayer == 1) enemyPlayer = 2;
		if (thisPlayer == 2) enemyPlayer = 1;
		system("cls");
		DrawBoard(enemyPlayer);

		//Get attack coords from this player
		bool goodInput = false;
		int x, y;
		while (goodInput == false) {
			goodInput = UserInputAttack(x, y, thisPlayer);
		}

		//Check board; if a ship is there, set as HIT.. otherwise MISS
		if (player[enemyPlayer].grid[x][y] == isSHIP) player[enemyPlayer].grid[x][y] = isHIT;
		if (player[enemyPlayer].grid[x][y] == isWATER) player[enemyPlayer].grid[x][y] = isMISS;

		//Check to see if the game is over
		//If 0 is returned, nobody has won yet
		int aWin = GameOverCheck(enemyPlayer);
		if (aWin != 0) {
			gameRunning = false;
			break;
		}
		//Alternate between each player as we loop back around
		thisPlayer = (thisPlayer == 1) ? 2 : 1;
	} while (gameRunning);

	system("cls");
	cout << "\n\nCONGRATULATIONS!!!  PLAYER " << thisPlayer << " HAS WON THE GAME!\n\n\n\n";

	system("pause");
	return 0;
}


bool GameOverCheck(int enemyPLAYER)
{
	bool winner = true;
	//Loop through enemy board
	for (int w = 0; w<BOARD_WIDTH; ++w) {
		for (int h = 0; h<BOARD_HEIGHT; ++h) {
			//If any ships remain, game is NOT over
			if (player[enemyPLAYER].grid[w][h] = isSHIP)
			{
				winner = false;
				return winner;
			}
		}
	}
	//If we get here, somebody won, game over!
	return winner;
}


bool UserInputAttack(int& x, int& y, int theplayer)
{
	cout << "\nPLAYER " << theplayer << ", ENTER COORDINATES TO ATTACK: ";
	bool goodInput = false;
	cin >> x >> y;
	if (x<0 || x >= BOARD_WIDTH) return goodInput;
	if (y<0 || y >= BOARD_HEIGHT) return goodInput;
	goodInput = true;
	return goodInput;
}

PLACESHIPS UserInputShipPlacement()
{
	int d, x, y;
	PLACESHIPS tmp;
	//Using this as a bad return
	tmp.shipType.onGrid[0].X = -1;
	//Get 3 integers from user
	cin >> d >> x >> y;
	if (d != 0 && d != 1) return tmp;
	if (x<0 || x >= BOARD_WIDTH) return tmp;
	if (y<0 || y >= BOARD_HEIGHT) return tmp;
	//Good data
	tmp.direction = (DIRECTION)d;
	tmp.shipType.onGrid[0].X = x;
	tmp.shipType.onGrid[0].Y = y;
	return tmp;
}

void LoadShips()
{
	//Sets the default data for the ships
	//we plan to include in the game
	//IMPORTANT!! > MUST MATCH SHIP_TYPES -Default=5 (0-4)
	ship[0].name = "Cruiser"; ship[0].length = 2;
	ship[1].name = "Frigate"; ship[1].length = 3;
	ship[2].name = "Submarine"; ship[2].length = 3;
	ship[3].name = "Escort"; ship[3].length = 4;
	ship[4].name = "Battleship"; ship[4].length = 5;
}
void ResetBoard()
{
	//Loop through each player
	for (int plyr = 1; plyr<3; ++plyr)
	{
		//For each grid point, set contents to 'water'
		for (int w = 0; w<BOARD_WIDTH; ++w) {
			for (int h = 0; h<BOARD_HEIGHT; ++h) {
				player[plyr].grid[w][h] = isWATER;
			}
		}
		//Loop back to next player
	}
}

void DrawBoard(int thisPlayer)
{
	//Draws the board for a player (thisPlayer)
	cout << "PLAYER " << thisPlayer << "'s GAME BOARD\n";
	cout << "----------------------\n";

	//Loop through top row (board_width) and number columns
	cout << "   ";
	for (int w = 0; w<BOARD_WIDTH; ++w) {
		if (w < 10)
			//Numbers only 1 character long, add two spaces after
			cout << w << "  ";
		else if (w >= 10)
			//Numbers 2 characters long, add only 1 space after
			cout << w << " ";
	}
	cout << "\n";

	//Loop through each grid point and display to console
	for (int h = 0; h<BOARD_HEIGHT; ++h) {
		for (int w = 0; w<BOARD_WIDTH; ++w) {

			//If this is the FIRST (left) grid point, number the grid first
			if (w == 0) cout << h << " ";
			//If h was 1 character long, add an extra space to keep numbers lined up
			if (w<10 && w == 0) cout << " ";
			//Display contents of this grid (if game isn't running yet, we are placing ships
			//so display the ships
			if (gameRunning == false) cout << player[thisPlayer].grid[w][h] << "  ";
			//Don't show ships, BUT show damage if it's hit
			if (gameRunning == true && player[thisPlayer].grid[w][h] != isSHIP)
			{
				cout << player[thisPlayer].grid[w][h] << "  ";
			}
			else if (gameRunning == true && player[thisPlayer].grid[w][h] == isSHIP)
			{
				cout << isWATER << "  ";
			}
			//If we have reached the border.. line feed
			if (w == BOARD_WIDTH - 1) cout << "\n";
		}
	}
}*/
//good, working code

/*#include <iostream>

#include <stdlib.h>

#include <time.h>

using namespace std;

int main()

{

char grid[10][10], ship;

int count = 0, randi, randj, ch = 0, loop = 0;

srand(time(0));

for (int i = 0; i<10; i++)

for (int j = 0; j<10; j++)

grid[i][j] = '-';

//display empty board

cout << "The board before placing the ships (empty board)..."

<< endl << endl;

for (int i = 0; i<10; i++)

{

for (int j = 0; j<10; j++)

cout << grid[i][j] << " ";

cout << endl;

}

cout << endl << endl;

//prompt and read the choice of ship to be placed on the board

cout << "1.Carrier\n2.Battleship\n3.Submarine"

<< "\n4.Destroyer\n5.Cruiser" << endl;

//read the choice of ship

do

{

cout << "Enter your choice of ship to be placed :";

cin >> ch;

} while (ch<0 || ch>5);

switch (ch)

{

case 1:

count = 5;

ship = 'C';

break;

case 2:

ship = 'B';

count = 4;

break;

case 3:

ship = 'S';

count = 3;

break;

case 4:

count = 3;

ship = 'D';

break;

case 5:

count = 2;

ship = 'U';

break;

}

//loop to place carrier ships on the

while (loop<count)

{

//selecting random locations to place ships

randi = rand() % 10;

randj = rand() % 10;

//check the location is enpty or not

if (grid[randi][randj] == '-')

{

grid[randi][randj] = ship;

loop++;

}

}

cout << endl << endl;

//display the board after placing the ship

cout << "The board after placing the selected ship..."

<< endl << endl;

for (int i = 0; i<10; i++)

{

for (int j = 0; j<10; j++)

cout << grid[i][j] << " ";

cout << endl;

}

system("PAUSE");

return 0;

}*/
//bad code

/*int main()
{
int B[10][10] = { {1,2,3,4,5,6,7,8,9,10},{ 1,2,3,4,5,6,7,8,9,10 } };

for (int row = 0; row < 10; row++)
{
for (int column = 0; column < 10; column++)
{
cout << B[row][column] << " ";
}
cout << endl;
}
}*/
//my code that sucks

/*#include <iostream>
#include <ctime>
using namespace std;

const int rows = 10;
const int elements = 10;

int maxships = 10;

int matrix[rows][elements];

void Clear()
{
for (int i = 0; i < rows; i++)
{
for (int j = 0; j < elements; j++)
{
matrix[i][j] = 0;
}
}
}

void Show()
{
for (int i = 0; i < rows; i++)
{
for (int j = 0; j < elements; j++)
{
cout << matrix[i][j] << " ";
}
cout << endl;
}
}

int NumberOfShips()
{
int c = 0;

for (int i = 0; i < rows; i++)
{
for (int j = 0; j < elements; j++)
{
if (matrix[i][j] == 1)
c++;
}
}

return c;
}

void SetShips()
{
int s = 0;
while (s < maxships)
{
int x = rand() % rows;
int y = rand() % elements;
if (matrix[x][y] != 1)
{
s++;
matrix[x][y] = 1;
}
}
}

bool Attack(int x, int y)
{
if (matrix[x][y] == 1)
{
matrix[x][y] = 2;
return true;
}
return false;
}

int main()
{
srand(time(NULL));
Clear();
SetShips();
int pos1, pos2;
char prompt;
while (1)
{
cout << "The letters are counted as numbers.\n";
cout << "Ex: 1 7 = A 7\n";
cout << "Please input location: "; cin >> pos1 >> pos2;
if (Attack(pos1, pos2))
cout << "You got me! :)" << endl;
else
cout << "Sorry no ship at that position!" << endl;
cout << "Number of ships left: " << NumberOfShips() << endl;
cout << "Do you want to surrender (y/n)? "; cin >> prompt;
if (prompt == 'y')
break;
}
cout << "Game over!" << endl;
Show();
system("pause");
return 0;
}*/
//simple code, needs work

/*#include "stdafx.h"
#include <ctime>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

namespace game
{
	int rows = 0;
	int columns = 0;
	int maxNumbShips = 0;

	const char WATER = '~';
	const char HIT = 'X';
	const char MISS = '/';
	const char SHIP = 'S';
	const char EMPTY = ' ';
}

void initBoard( vector< vector<char>>& playingBoard);
void displayBoard( vector< vector<char>> playingBoard);
void initShips( vector< vector<char>>& ships);
bool isGameOver(int shipsDestroyed);
void shoot( vector< vector<char>>& playingBoard,  vector< vector<char>>& ships, int& shipsDestroyed, int& turns);
int enterRowPosition();
int enterColPosotion();
void selectDifficulty();

int main()
{
	vector< vector<char>> playingBoard;
	vector< vector<char>> ships;

	int shipsDestroyed = 0; //How many ships have been destroyed by the player
	int turns = 0;

	selectDifficulty();
	initBoard(playingBoard);
	initShips(ships);
	displayBoard(playingBoard);

	while (!isGameOver(shipsDestroyed))
	{
		shoot(playingBoard, ships, shipsDestroyed, turns);
		displayBoard(playingBoard);
	}

	cout << "You destroyed all of the ships in: " << turns << " turns.";

	string barn;
	cin >> barn;
	return 0;
}

void initBoard( vector< vector<char>>& playingBoard)
{
	vector<char> tempVector;
	for (int i = 0; i < game::rows; i++)
	{
		tempVector.push_back(game::WATER);
	}

	for (int i = 0; i < game::columns; i++)
	{
		playingBoard.push_back(tempVector);
	}
}

void initShips( vector< vector<char>>& ships)
{
	vector<char> tempVector;
	for (int i = 0; i < game::rows; i++)
	{
		tempVector.push_back(game::EMPTY);
	}

	for (int i = 0; i < game::columns; i++)
	{
		ships.push_back(tempVector);
	}

	srand(time(NULL));
	bool emptyPosition = false;

	for (int ship = 0; ship < game::maxNumbShips; ship++)
	{
		do
		{
			int x = rand() % game::rows;
			int y = rand() % game::columns;

			if (ships[x][y] == game::SHIP)
			{
				emptyPosition = false;
			}
			else
			{
				ships[x][y] = game::SHIP;
				emptyPosition = true;
			}
		} while (!emptyPosition);
	}
}

void displayBoard( vector< vector<char>> playingBoard)
{
	cout << "\n";
	for (int row = 0; row < game::rows; row++)
	{
		cout << "\t";
		for (int col = 0; col < game::columns; col++)
		{
			cout << playingBoard[row][col];
			cout << "\t";
		}
		cout << "\n";
	}
}


bool isGameOver(int shipsDestroyed)
{
	return shipsDestroyed >= game::maxNumbShips;
}

void shoot( vector< vector<char>>& playingBoard,  vector< vector<char>>& ships, int& shipsDestroyed, int& turns)
{
	int row = enterRowPosition();
	int col = enterColPosotion();

	if (ships[row][col] == game::SHIP)
	{
		playingBoard[row][col] = game::HIT;
		shipsDestroyed++;
	}

	else
	{
		playingBoard[row][col] = game::MISS;
	}
	turns++;
}

int enterRowPosition()
{
	int row = 0;
	do
	{
		 cout << "Enter row: ";
		 cin >> row;
	} while (row < 0 || row >= game::rows);

	return row;
}

int enterColPosotion()
{
	int col = 0;
	do
	{
		 cout << "Enter column: ";
		 cin >> col;
	} while (col < 0 || col >= game::columns);

	return col;
}

void selectDifficulty()
{
	int choice = 0;
	 cout << "You will now play a 10 by 10 board. Enter 1\n";
	 cin >> choice;

	 if (choice)
	 {
		 game::rows = 10;
		 game::columns = 10;
		 game::maxNumbShips = 5;
		 
	 }
	 else
	 {
		 cout << "Please enter valid information.";
	 }
	}*/
//no

/*#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include <iostream>
using namespace std;

void initializeboard(char plyr1board[][10], int numrows, int numcolumn)
{
	int rowindex = 0, clmnindex = 0;
	for (; rowindex < numrows; ++rowindex)
	{
		for (clmnindex = 0; clmnindex < numcolumn; ++clmnindex)
		{
			plyr1board[rowindex][clmnindex] = '~';
		}
	}
}
void printboard(char plyr1board[][10], int numrows, int numcolumn)
{
	for (int r = 0; r < numrows; r++) {
		for (int c = 0; c < numcolumn; c++) {
			cout << ("%c", plyr1board[r][c]);
		}
		cout << ("\n");
	}
}

int main() {
	char plyr1board[10][10];
	int direction, c1, c2;
	initializeboard(plyr1board, 10, 10);
	cout << "Enter direction you would like to place your Carrier: \n1. Vertical\n2. Horizontal\nSelection: ";
	cin >> direction;
	if (direction == 1)
	{
		cout << "Enter coordinate where you would like to place Carrier: ";
		cin >> c1, c2;
		while (c1 > 5)
		{
			cout << "Don't send your men into the abyss! Stay within the board (5 Spaces)\n\n";
			cout << "Enter coordinate where you would like to place Carrier: ";
			cin >> c1, c2;
		}
		for (int a = c1, q = 0; q < 5; ++q, ++a) //q represents the size of the carrier (5), once 4 is reached, a should stop incrementing as well
		{
			plyr1board[a][c1 - 1] = 'C'; //a = row, c2 = column (for vertical, column shouldn't change)
		}
	}
	else 
	{
		cout << "Enter coordinate where you would like to place Carrier: ";
		cin >> c1, c2;
		while (c1 > 5)
		{
			cout << "Don't send your men into the abyss! Stay within the board (5 Spaces)\n\n";
			cout << "Enter coordinate where you would like to place Carrier: ";
			cin >> c1, c2;
		}
		for (int a = c1, q = 0; q < 5; ++q, ++a) //q represents the size of the carrier (5), once 4 is reached, a should stop incrementing as well
		{
			plyr1board[a][c1 - 1] = 'C'; //a = row, c2 = column (for vertical, column shouldn't change)
		}
	}
	printboard(plyr1board, 10, 10);
}*/
//a code that could work
